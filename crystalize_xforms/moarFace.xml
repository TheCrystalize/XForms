<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
<transform_def name="moarface">
	<!-- based on an Apophysis variation by Joel Faber and Michael Faber. Variables by Crystalize -->
	<node name="input_params">
		<real name="moarface">1</real>
		<real name="moarface_a_re">1</real>
		<real name="moarface_a_im">0</real>
		<real name="moarface_b_re">0</real>
		<real name="moarface_b_im">0</real>
		<real name="moarface_c_re">0</real>
		<real name="moarface_c_im">0</real>
		<real name="moarface_d_re">1</real>
		<real name="moarface_d_im">0</real>
	</node>

	<node name="internal_params">
		<real name="scale" />
		<real name="are" />
		<real name="aim" />
		<real name="bre" />
		<real name="bim" />
		<real name="cre" />
		<real name="cim" />
		<real name="dre" />
		<real name="dim" />
	</node>

	<string name="winter_init_function">
		<![CDATA[
			moarface_init_result(moarface, moarface_a_re, moarface_a_im, moarface_b_re, moarface_b_im, moarface_c_re, moarface_c_im, moarface_d_re, moarface_d_im)
		]]>
	</string>

	<string name="winter_eval_function">
		<![CDATA[
			let
				z = complex(p_in.x, p_in.y)
				a = complex(are, aim)
				b = complex(bre, bim)
				c = complex(cre, cim)
				d = complex(dre, dim)
				mo = (a * z + b) / (c * z + d)
			in
				toVec2(if(p_in.x > 0.0, z, mo)) * scale
		]]>
	</string>
</transform_def>
</user_transforms>
