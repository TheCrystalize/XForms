<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="jac_Elk">
		<node name="input_params">
			<real name="jac_Elk">1</real>
			<real name="jac_Elk_k">0.5</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="k" />
		</node>

		<int name="num_unit_randoms">2</int>

		<string name="winter_init_function">
			<![CDATA[
				jac_Elk_init_result(jac_Elk * (sqrt2() / lemniscate()), jac_Elk_k)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					cotphi2 = square(scot(p_in.x))
					b0 = -(cotphi2 + k * square(sinh(p_in.y) / (epsilon() + sin(p_in.x))) - 1 + k)
					b = b0 * 0.5
					c0 = -(1 - k) * cotphi2
					c = ssqrt(square(b) - c0)
					x1 = max(-b + c, -b - c)
					mu0 = ssqrt((x1 / nonz(cotphi2) - 1) / nonz(k))
					mu = toReal(sgn(p_in.y)) * mu0
					lambda = toReal(sgn(p_in.x)) * ssqrt(x1)

					sinA = toReal(sgn(lambda)) / sqrt(square(lambda) + 1)
					cosA = lambda * sinA
					phi = sinA * carlsonRF(square(cosA), 1 - k * square(sinA), 1)

					cosB = 1 / sqrt(square(mu) + 1)
					sinB = mu * cosB
					psi = sinB * carlsonRF(square(cosB), 1 - (1 - k) * square(sinB), 1)
				in
					vec2(phi, psi) * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
