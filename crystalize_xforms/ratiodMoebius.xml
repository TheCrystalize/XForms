<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="ratiodMoebius">
		<node name="input_params">
			<real name="ratiodMoebius">1</real>
			<real name="nar">1</real>
			<real name="nai">0</real>
			<real name="nbr">0</real>
			<real name="nbi">0</real>
			<real name="ncr">0</real>
			<real name="nci">0</real>
			<real name="ndr">1</real>
			<real name="ndi">0</real>
			<real name="dar">1</real>
			<real name="dai">0</real>
			<real name="dbr">0</real>
			<real name="dbi">0</real>
			<real name="dcr">0</real>
			<real name="dci">0</real>
			<real name="ddr">1</real>
			<real name="ddi">0</real>
		</node>

		<node name="internal_params">
			<real name="scale" />
			<real name="nar" />
			<real name="nai" />
			<real name="nbr" />
			<real name="nbi" />
			<real name="ncr" />
			<real name="nci" />
			<real name="ndr" />
			<real name="ndi" />
			<real name="dar" />
			<real name="dai" />
			<real name="dbr" />
			<real name="dbi" />
			<real name="dcr" />
			<real name="dci" />
			<real name="ddr" />
			<real name="ddi" />
		</node>

		<int name="num_unit_randoms">2</int>

		<string name="winter_init_function">
			<![CDATA[
				ratiodMoebius_init_result(ratiodMoebius, nar, nai, nbr, nbi, ncr, nci, ndr, ndi, dar, dai, dbr, dbi, dcr, dci, ddr, ddi)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					z = complex(p_in)
					na = complex(nar, nai)
					nb = complex(nbr, nbi)
					nc = complex(ncr, nci)
					nd = complex(ndr, ndi)
					da = complex(dar, dai)
					db = complex(dbr, dbi)
					dc = complex(dcr, dci)
					dd = complex(ddr, ddi)
					num = (na * z + nb) / (nc * z + nd)
					den = (da * z + db) / (dc * z + dd)
				in
					toVec2(num / den) * scale
			]]>
		</string>
	</transform_def>


</user_transforms>
