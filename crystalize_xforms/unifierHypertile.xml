<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="unifierHypertile">
		<node name="input_params">
			<real name="unifierHypertile">1</real>
			<real name="unifierHypertile_p">1</real>
			<real name="unifierHypertile_q">1</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="p" />
			<real name="tpp" />
			<real name="tsh" />
			<real name="ir" />
		</node>

		<int name="num_unit_randoms">1</int>

		<string name="winter_init_function">
			<![CDATA[
				let
					tpp = twopi() / unifierHypertile_p
					pp = tpp * 0.5
					tpq = twopi() / unifierHypertile_q
					pq = tpq * 0.5
					tsh = 1 / sqrt(1 - (cos(tpp) - 1) / (cos(tpp) + cos(tpq)))
					ir = (1/sqrt(square(sin(halfpi() + pq)) / square(sin(pp)) - 1)) * (sin(halfpi() + pq) / sin(pp) - 1)
				in
					unifierHypertile_init_result(unifierHypertile, unifierHypertile_p, tpp, tsh, ir)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					z = complex(p_in)
					ro = exp(complex(0,floor(unit_rnd_0 * p) * tpp))
					c = if(length(p_in) > ir,
							p_in,
							toVec2(ro * ((z + tsh) / (z * tsh + 1))))
				in
					c * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
