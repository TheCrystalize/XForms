<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="tile_plane">
		<!-- original transformation by zy0rg, translated to Winter by Crystalize -->
		<node name="input_params">
			<real name="tile_plane">1</real>
			<real name="tile_plane_width">1</real>
			<real name="tile_plane_height">1</real>
			<real name="tile_plane_edge">1</real>
			<real name="tile_plane_spread">1</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="el" />
			<real name="xs" />
			<real name="ys" />
			<real name="w" />
			<real name="h" />
			<real name="edge" />
			<real name="spread" />
		</node>

		<int name="num_unit_randoms">5</int>

		<string name="winter_init_function">
			<![CDATA[
				let
					el = 0.5 - tile_plane_edge * 0.5
					xs = tile_plane_spread / tile_plane_width
					ys = tile_plane_spread / tile_plane_height
				in
					tile_plane_init_result(tile_plane, el, xs, ys, tile_plane_width, tile_plane_height, tile_plane_edge, tile_plane_spread)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					a = unit_rnd_0 * twopi()
					r0 = 1.0 / sqrt(unit_rnd_1 - unit_rnd_2)
					r = if(isFinite(r0), r0, big())
					x0 = p_in.x / w + 0.5
					x = if(spread != 0.0,
									p_in.x + w * round(cos(a) * r * xs),
									if(edge != 0.0,
											(x0 - floor(x0)) - 0.5,
											p_in.x))
					x2 = if(edge != 1.0,
									if(x > el,
											(x - el) / edge,
											if(x < -el,
													(x + el) / edge,
													0.0)),
									x)
					fx = if(x2 != 0.0,
									if(cos(x2 * pi()) < unit_rnd_3 * 2.0 - 1.0,
											if(x2 > 0.0, p_in.x - w, p_in.x + w),
											x2),
									x2)
					y0 = p_in.y / h + 0.5
					y = if(spread != 0.0,
									p_in.y + h * round(sin(a) * r * ys),
									if(edge != 0.0,
											(y0 - floor(y0)) - 0.5,
											p_in.y))
					y2 = if(edge != 1.0,
									if(y > el,
											(y - el) / edge,
											if(y < -el,
													(y + el) / edge,
													0.0)),
									y)
					fy = if(y2 != 0.0,
									if(cos(y2 * pi()) < unit_rnd_4 * 2.0 - 1.0,
											if(y2 > 0.0, p_in.y - h, p_in.y + h),
											y2),
									y2)
				in
					vec2(fx, fy) * weight

			]]>
		</string>
	</transform_def>


</user_transforms>
