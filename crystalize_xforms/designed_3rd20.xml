<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="designed_3rd20">
		<node name="input_params">
			<real name="designed_3rd20">1</real>
			<real name="fill" minval="0" maxval="0.5">0</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="fill" />
		</node>

		<int name="num_unit_randoms">1</int>

		<string name="winter_init_function">
			<![CDATA[
				designed_3rd20_init_result(designed_3rd20, fill)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					r = 1 / length(p_in)
					r1 = 2 / length(p_in)
					r2 = 0.5 / length(p_in)
					c1 = complex(abs(p_in.x), abs(p_in.y))
					c2 = complex(length(p_in), length(p_in))
					c = c1 / exp(c2 * sqrt(c1 * c2 + 2.0))
					z01 = get_t(-abs(p_in.x), abs(p_in.x), tan(abs(p_in.x * length(p_in * invpi()) * invpi())))
					z02 = get_t(-abs(p_in.y), abs(p_in.y), tan(abs(p_in.y * length(p_in * invpi()) * invpi())))
					z0 = z01 + z02
					s = abs(sin(p_in.x * pi())) + abs(sin(p_in.y * pi()))
					z1 = fmod(fmod(z0, p_in.x), s)
					z2 = fmod(s, fmod(z0, p_in.y))
					z = (if r < twoinvpi() then if r < length(c) then z1 else z2 else fmod(z01 * pi() + z02 * pi(), tan(p_in.x * p_in.y * fourpi()))) / tanh(p_in.x * p_in.y * length(p_in * invpi()))
					con0 = abs(z) > r1
					con1 = abs(z) < r1 && abs(z) > r2
					con2 = abs(z) < r2
				in
					(if if fill <= 0.0 then con0 else if fill > 0.25 then con2 else con1 then p_in else vec2(0.0)) * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
