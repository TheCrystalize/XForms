<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="disc_arcoth">
		<node name="input_params">
			<real name="disc_arcoth">1</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				disc_arcoth_init_result(disc_arcoth)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					z = complex(p_in.x, p_in.y)
					c = sqrt((z + 1) / (z - 1))
					r = (c - 1) / (c + 1)
				in
					toVec2(r) * weight
			]]>
		</string>
	</transform_def>

	<transform_def name="disc_arcsch">
		<node name="input_params">
			<real name="disc_arcsch">1</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				disc_arcsch_init_result(disc_arcsch)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					z = complex(p_in.x, p_in.y)
					c = sqrt(1 / sqr(z) + 1) + 1 / z
					r = (c - 1) / (c + 1)
				in
					toVec2(r) * weight
			]]>
		</string>
	</transform_def>

	<transform_def name="disc_arsinh">
		<node name="input_params">
			<real name="disc_arsinh">1</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				disc_arsinh_init_result(disc_arsinh)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					z = complex(p_in.x, p_in.y)
					c = z + sqrt(z * z + 1.0)
					r = (c - 1) / (c + 1)
				in
					toVec2(r) * weight
			]]>
		</string>
	</transform_def>

	<transform_def name="disc_artanh">
		<node name="input_params">
			<real name="disc_artanh">1</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				disc_artanh_init_result(disc_artanh)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
				z = complex(p_in.x, p_in.y)
				c = sqrt((z - 1) / (-z - 1))
				r = ((c - 1) / (-c - 1))
				in
					toVec2(r) * weight
			]]>
		</string>
	</transform_def>

	<transform_def name="disc_sqrt">
		<node name="input_params">
			<real name="disc_sqrt">1</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				disc_sqrt_init_result(disc_sqrt)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					z = complex(p_in.x, p_in.y)
					c = sqrt(z)
					r = (c - 1) / (c + 1)
				in
					toVec2(r) * weight
			]]>
		</string>
	</transform_def>

	<transform_def name="disc2strip">
		<node name="input_params">
			<real name="disc2strip">1</real>
			<real name="disc2strip_power">0.5</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="power" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				disc2strip_init_result(disc2strip, -0.5 * disc2strip_power)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					scale = dot(p_in, p_in)
					rin = p_in * scale
					r_factor = exp(log(dot(rin, rin)) * power)
					theta = atan2(rin.y, rin.x)
					phi = theta - pi() * floor(theta / pi())
					phi2 = if phi > halfpi()
									then phi - pi()
									else phi
					amp = (1 / cos(phi2)) * weight * r_factor
				in
					rin * amp
			]]>
		</string>
	</transform_def>
</user_transforms>
