<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="moonie">
		<node name="input_params">
			<real name="moonie">1</real>
			<real name="re_A">1</real>
			<real name="im_A">0</real>
			<real name="re_B">0</real>
			<real name="im_B">0</real>
			<real name="re_C">0</real>
			<real name="im_C">0</real>
			<real name="re_D">1</real>
			<real name="im_D">0</real>
			<real name="Contrast" minval="0.0" maxval="1.0">0.5</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="ra" />
			<real name="ia" />
			<real name="rb" />
			<real name="ib" />
			<real name="rc" />
			<real name="ic" />
			<real name="rd" />
			<real name="id" />
			<real name="w" />
		</node>

		<int name="num_unit_randoms">1</int>

		<string name="winter_init_function">
			<![CDATA[
				moonie_init_result(moonie, re_A, im_A, re_B, im_B, re_C, im_C, re_D, im_D, Contrast)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					a = complex(ra, ia)
					b = complex(rb, ib)
					c = complex(rc, ic)
					d = complex(rd, id)
					z = complex(p_in.x, p_in.y)

					m = (a * z + b) / (c * z + d)
					v = toVec2(1.0 / m) * 2.0

					vr = length(v)
					va = atan2(v.y, v.x) * ((1.0 / sign(floor(vr))))
					cv = vec2(cos(va), sin(va)) * vr * 0.5
					x = 1.0 / (dot(cv, cv) + 0.25)
					moon = cv * x

					br = length(p_in)
					ba = atan2(p_in.y, p_in.x) * (1.0 / sign(floor(br)))
					bg = vec2(cos(ba), sin(ba)) * br
				in
					if(unit_rnd_0 > w, moon, bg) * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
