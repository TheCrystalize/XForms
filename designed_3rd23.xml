<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="designed_3rd23">
		<node name="input_params">
			<real name="designed_3rd23">1</real>
			<real name="fill" minval="0" maxval="0.5">0</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="fill" />
		</node>

		<int name="num_unit_randoms">1</int>

		<string name="winter_init_function">
			<![CDATA[
				designed_3rd23_init_result(designed_3rd23, fill)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					r = 1 / length(p_in)
					r1 = 2 / length(p_in)
					r2 = 0.5 / length(p_in)
					a1 = mat2x2(cos(abs(p_in.x * quartpi())), -sin(abs(p_in.y * quartpi())),
											sin(abs(p_in.x * quartpi())), cos(abs(p_in.y * quartpi()))) * p_in
					a2 = mat2x2(abs(cos(p_in.x * quartpi())), -abs(sin(p_in.y * quartpi())),
											abs(sin(p_in.x * quartpi())), abs(cos(p_in.y * quartpi()))) * p_in
					a = dist(a1, a2)
					b1 = cos(abs(sin((p_in.x + p_in.y) * pi()) / pi()) + abs(sin((p_in.x - p_in.y) * pi()) / pi()))
					b2 = cos(abs(sin(p_in.x * pi()) / pi()) + abs(sin(p_in.y * pi()) / pi()))
					b = fmod(b1, b2)
					c1 = cos(abs(sin((p_in.x + p_in.y) * pi())) - abs(sin((p_in.x - p_in.y) * pi())))
					c2 = cos(abs(sin(p_in.x * pi())) - abs(sin(p_in.y * pi())))
					c = fmod(c1, c2)
					bc = b / (c / r)
					z0 = abs(sin(p_in.x * invpi())) + abs(sin(p_in.y * invpi()))
					z = (if r < a then fmod(a, z0) else bc)
					con0 = abs(z) > r1
					con1 = abs(z) < r1 && abs(z) > r2
					con2 = abs(z) < r2
				in
					(if if fill <= 0.0 then con0 else if fill > 0.25 then con2 else con1 then p_in else vec2(0.0)) * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
