<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="exstripeaganza">
		<!-- a joint effort by imminiman and Crystalize :D -->
		<node name="input_params">
			<real name="exstripeaganza">1</real>
            <real name="exstripeaganza_up" minval="0.0" maxval="0.999999999999">0.999999999999</real>
            <real name="exstripeaganza_down" minval="0.0" maxval="0.999999999999">0.999999999999</real>
			<real name="exstripeaganza_symm" minval="0.0">0</real>
			<real name="exstripeaganza_symm_updown_switch" minval="0.0" maxval="0.05">0</real>
			<real name="exstripeaganza_seed">0</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="up" />
			<real name="down" />
			<real name="symm" />
			<real name="symm_ud" />
			<real name="seed" />
		</node>

		<int name="num_unit_randoms">1</int>

		<string name="winter_init_function">
			<![CDATA[
				exstripeaganza_init_result(exstripeaganza, exstripeaganza_up ,exstripeaganza_down ,exstripeaganza_symm ,exstripeaganza_symm_updown_switch ,exstripeaganza_seed)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					y=
						if p_in.y<0 then
								pow(invpi(), 1 / log(up)) - 1 + quartpi()
						else
								pow(invpi(), 1 / log(down)) - 1 + quartpi()
					a = toReal(truncateToInt(y * p_in.x + seed))
					stripes = p_in * hash_shadertoy(a * 4, a * 2, exp(seed/100000))
					stripes_g_4distribution=
						if unit_rnd_0 < 0.5 then
							vec2(0.0)
						else
							stripes
					symmetry=
						if symm > 0 then
							if abs(stripes.x) < symm / 2 then
								if stripes.y >= 0 && symm_ud > 0 then
									vec2(0.0)
								else if stripes.y < 0 && symm_ud < 0 then
									vec2(0.0)
								else
									if unit_rnd_0 < 0.5 then
										vec2(stripes.x, stripes.y)
									else
										vec2(stripes.x, -stripes.y)
							else
								stripes_g_4distribution
						else
							stripes_g_4distribution
				in
					symmetry * weight
			]]>
		</string>
	</transform_def>
</user_transforms>
