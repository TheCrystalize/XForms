<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="rosoni">
		<node name="input_params">
			<real name="rosoni">1</real>
			<real name="rosoni_maxiter"minval="1"maxval="1024">25</real>
			<real name="rosoni_sweetiter"minval="0"maxval="1023">1</real>
			<real name="rosoni_altshapes"minval="0"maxval="1">0</real>
			<real name="rosoni_cutoff">1</real>
			<real name="rosoni_radius">0.4</real>
			<real name="rosoni_dx">0.6</real>
			<real name="rosoni_dy">0.0</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="maxiter" />
			<real name="sweetiter" />
			<real name="altshapes" />
			<real name="cutoff" />
			<real name="radius" />
			<real name="dx" />
			<real name="dy" />
			<real name="cosa" />
			<real name="sina" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				let
					phi = twopi() / floor(rosoni_maxiter)
					sina = sin(phi)
					cosa = cos(phi)
				in
					rosoni_init_result(rosoni, floor(rosoni_maxiter), floor(rosoni_sweetiter), floor(rosoni_altshapes), rosoni_cutoff, rosoni_radius, rosoni_dx, rosoni_dy, cosa, sina)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					r = if(cutoff < 0.0, max(abs(p_in.x), abs(p_in.y)) + cutoff, length(p_in) - cutoff)
					v = mat4x4(p_in.x, p_in.y, 0.0, if(r > 0.0, 1.0, 0.0),
										 cosa, sina, p_in.x, p_in.y,
										 maxiter, sweetiter, altshapes, cutoff,
										 radius, dx, dy, 0.0)
					ro0 = rosoni(v, 0)
					ro = iterate(rosoni, v)
				in
					(if r > 0.0
						then vec2(p_in.x, p_in.y)
						else if ro.e15 == 1.0
									then vec2(if(dy != 0.0, -ro.e6, ro.e6), ro.e7)
									else vec2(ro.e6, ro.e7)) * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
