<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="designed_3rd09">
		<node name="input_params">
			<real name="designed_3rd09">1</real>
			<real name="fill" minval="0" maxval="0.5">0</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="fill" />
		</node>

		<int name="num_unit_randoms">1</int>

		<string name="winter_init_function">
			<![CDATA[
				designed_3rd09_init_result(designed_3rd09, fill)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					r = 1 / length(p_in)
					r1 = 2 / length(p_in)
					r2 = 0.25 / length(p_in)
					a1 = sin(abs(cos(p_in.x + p_in.y)) + abs(cos(p_in.x - p_in.y)))
					a2 = cos(abs(p_in.x + p_in.y) + abs(p_in.x - p_in.y))
					a = fmod(a2, a1)
					b1 = sin(abs(cos(p_in.x)) + abs(cos(p_in.y)))
					b2 = cos(abs(p_in.x) + abs(p_in.y))
					b = fmod(b2, b1)
					z = tan(if r < (abs(p_in.x + p_in.y) + abs(p_in.x - p_in.y)) / fourpi() then a * b else tan((abs(p_in.x) - abs(p_in.y)) * twopi()) * tan(length(p_in * twopi())))
					con0 = abs(z) > r1
					con1 = abs(z) < r1 && abs(z) > r2
					con2 = abs(z) < r2
				in
					(if if fill <= 0.0 then con0 else if fill > 0.25 then con2 else con1 then p_in else vec2(0.0)) * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
