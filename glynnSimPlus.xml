<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="glynnSim5Plus">
		<node name="input_params">
			<real name="glynnSim5Plus">1</real>
			<real name="radius"minval="0">1</real>
			<real name="thickness">0.1</real>
			<real name="contrast"minval="0">0.5</real>
			<real name="pow">1.5</real>
			<real name="preMobiusAr">1</real>
			<real name="preMobiusAi">0</real>
			<real name="preMobiusBr">0</real>
			<real name="preMobiusBi">0</real>
			<real name="preMobiusCr">0</real>
			<real name="preMobiusCi">0</real>
			<real name="preMobiusDr">1</real>
			<real name="preMobiusDi">0</real>
			<real name="innerWeight">0.5</real>

		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="radius" />
			<real name="radius1" />
			<real name="contrast" />
			<real name="power" />
			<real name="Ar" />
			<real name="Ai" />
			<real name="Br" />
			<real name="Bi" />
			<real name="Cr" />
			<real name="Ci" />
			<real name="Dr" />
			<real name="Di" />
			<real name="innerWeight" />
		</node>

		<int name="num_unit_randoms">2</int>

		<string name="winter_init_function">
			<![CDATA[
				glynnSim5Plus_init_result(glynnSim5Plus, radius, radius+thickness, contrast, pow, preMobiusAr, preMobiusAi, preMobiusBr, preMobiusBi, preMobiusCr, preMobiusCi, preMobiusDr, preMobiusDi, innerWeight)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					z = complex(p_in.x, p_in.y)
					a = complex(Ar,Ai)
					b = complex(Br,Bi)
					c = complex(Cr,Ci)
					d = complex(Dr,Di)
					pmob = toVec2((a * z + b) / (c * z + d))
					r = length(pmob)
					alpha = radius / r
					f0 = r < radius1 ? vec2(0.0,0.0) : unit_rnd_0 > contrast * pow(alpha, power) ? pmob : pmob * (alpha * alpha)
					f = innerWeight > unit_rnd_1 ? f0 : p_in
				in
					f * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
