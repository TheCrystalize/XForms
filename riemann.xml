<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="riemann">
		<!-- a Crystalize xform, yo -->
		<node name="input_params">
			<real name="riemann">1</real>
			<real name="riemann_real_a">1</real>
			<real name="riemann_imag_a">0</real>
			<real name="riemann_real_b">0</real>
			<real name="riemann_imag_b">0</real>
			<real name="riemann_real_c">0</real>
			<real name="riemann_imag_c">0</real>
			<real name="riemann_real_d">1</real>
			<real name="riemann_imag_d">0</real>
		</node>

		<node name="internal_params">
			<real name="weight" />
			<real name="rea" />
			<real name="ima" />
			<real name="reb" />
			<real name="imb" />
			<real name="rec" />
			<real name="imc" />
			<real name="red" />
			<real name="imd" />
		</node>


		<string name="winter_init_function">
			<![CDATA[
				riemann_init_result(riemann, riemann_real_a, riemann_imag_a, riemann_real_b, riemann_imag_b, riemann_real_c, riemann_imag_c, riemann_real_d, riemann_imag_d)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					a = complex(rea, ima)
					b = complex(reb, imb)
					c = complex(rec, imc)
					d = complex(red, imd)
					z = complex(p_in.x, p_in.y)
					m = toVec2((a * z + b) / (c * z + d))

					an = atan2(m.y, m.x) + twopi()
					r = 2.0 * pow(dot(m, m), -0.5)
					j = vec2(cos(an), sin(an)) * r

					r2 = length(j)
					ang = atan2(j.y, j.x)
					cc = if(r2 < 0.5, vec2(0.5 * cos(ang), 0.5 * sin(ang)), vec2(j.x, j.y))

					r3 = 1.0 / (dot(cc, cc) + 0.25)
				in
					cc * r3 * weight
			]]>
		</string>
	</transform_def>


</user_transforms>
