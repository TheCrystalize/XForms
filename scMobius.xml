<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<transform_def name="scMobius">
		<node name="input_params">
			<real name="scMobius">1</real>
			<real name="scMobius_re_A">1</real>
			<real name="scMobius_im_A">0</real>
			<real name="scMobius_re_B">0</real>
			<real name="scMobius_im_B">0</real>
			<real name="scMobius_re_C">0</real>
			<real name="scMobius_im_C">0</real>
			<real name="scMobius_re_D">1</real>
			<real name="scMobius_im_D">0</real>
		</node>

		<node name="internal_params">
			<real name="scale" />
			<real name="re_A" />
			<real name="im_A" />
			<real name="re_B" />
			<real name="im_B" />
			<real name="re_C" />
			<real name="im_C" />
			<real name="re_D" />
			<real name="im_D" />
		</node>

		<int name="num_unit_randoms">2</int>

		<string name="winter_init_function">
			<![CDATA[
				scMobius_init_result(scMobius, scMobius_re_A, scMobius_im_A, scMobius_re_B, scMobius_im_B, scMobius_re_C, scMobius_im_C, scMobius_re_D, scMobius_im_D)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					a = splitcomplex(re_A, im_A)
					b = splitcomplex(re_B, im_B)
					c = splitcomplex(re_C, im_C)
					d = splitcomplex(re_D, im_D)
					z = splitcomplex(p_in)
					f = (a * z + b) / (c * z + d)
				in
					toVec2(f) * scale
			]]>
		</string>
	</transform_def>


</user_transforms>
