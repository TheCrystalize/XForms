<?xml version="1.0" encoding="utf-8"?>
<user_transforms>
	<!-- transform by zy0rg -->
	<transform_def name="swirl3sin">
		<node name="input_params">
			<real name="swirl3sin">1</real>
			<real name="swirl3sin_shift">1</real>
			<real name="swirl3sin_min">1</real>
			<real name="swirl3sin_max">1</real>
		</node>

		<node name="internal_params">
			<real name="scale" />
			<real name="min" />
			<real name="max" />
			<real name="minang" />
			<real name="maxang" />
			<real name="shift" />
			<real name="dist" />
		</node>

		<string name="winter_init_function">
			<![CDATA[
				let
					min = if(swirl3sin_min > swirl3sin_max, swirl3sin_max, swirl3sin_min)
					max = if(swirl3sin_min > swirl3sin_max, swirl3sin_min, swirl3sin_max)
					minang = if(min > 0.0, log(min) * swirl3sin_shift, 0.0)
					maxang = if(max > 0.0, log(max) * swirl3sin_shift, 0.0)
					dist = max - min
				in
				swirl3sin_init_result(swirl3sin, min, max, minang, maxang, swirl3sin_shift, dist)
			]]>
		</string>

		<string name="winter_eval_function">
			<![CDATA[
				let
					angle = atan2(p_in.y, p_in.x)
					range = sqrt(p_in.x * p_in.x + p_in.y * p_in.y)
					ang = if(range < min, angle + minang, if(range > max, angle + maxang, angle + log((1.0 - cos((range - min) / dist * pi())) / 2.0 * dist + min) * shift))
				in
					vec2(cos(ang), -sin(ang)) * range * scale
			]]>
		</string>
	</transform_def>


</user_transforms>
